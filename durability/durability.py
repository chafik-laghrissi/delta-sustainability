# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Durability
                                 A QGIS plugin
 kjqsdfqsq
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-02-14
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Hamza Mogni
        email                : hamzamogni5@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .durability_dialog import DurabilityDialog
import os.path


class Durability:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Durability_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Durability')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Durability', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/durability/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Durability'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = DurabilityDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            self.main(3, 5, 1)

    ################################################################
    #
    # Backend
    #
    ################################################################

    def consistency_matrix(self, comparison, weights):
        # comparison_weights = [3, 5, 1]
        # weights = [0.6554865424, 0.1867494824, 0.1577639752]
        # comparison = [
        #     [1, comparison_weights[0], comparison_weights[1]],
        #     [1 / comparison_weights[0], 1, comparison_weights[2]],
        #     [1 / comparison_weights[1], 1 / comparison_weights[2], 1],
        # ]

        sp_normalise = list()
        rows, cols = (len(comparison), len(comparison[0]))

        # calculate comparison matrix
        # we multiply each column by
        # the corresponding weight
        for i in range(rows):
            for j in range(cols):
                comparison[i][j] = comparison[i][j] * weights[j]

            row_sum = sum(comparison[i])
            print(row_sum, weights[i])
            normalized_sp = row_sum / weights[i]

            comparison[i] += [row_sum, normalized_sp]
            sp_normalise.append(normalized_sp)

        # get lambda max value
        lambda_max = self.lambda_max(sp_normalise)

        # calculate consistency index and ratio
        consistency_index, consistency_ratio = self.consistency_index(
            len(weights), lambda_max)

        return comparison, lambda_max, consistency_index, consistency_ratio

    def lambda_max(self, sp_normalise):
        return sum(sp_normalise) / len(sp_normalise)

    def consistency_index(self, weights_length, lambda_max):
        index = (lambda_max - weights_length) / (weights_length - 1)
        ratio = index / 0.58

        return index, ratio

    def isConsistent(self, consistency_ratio):
        return consistency_ratio < 0.1

    def pair_wise_matrix_gen(self, a_b: float, a_c: float, b_c: float) -> list:
        return [[1, a_b, a_c], [1/a_b, 1, b_c], [1/a_c, 1/b_c, 1]]

    def weight_cal(self, pair_wise_matrix: list) -> list:
        s1 = []
        s2 = []
        s3 = []
        for nm in pair_wise_matrix:
            s1.append(nm[0])
            s2.append(nm[1])
            s3.append(nm[2])
        s = [sum(s1), sum(s2), sum(s3)]
        tmp_list = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
        for index1, i in enumerate(pair_wise_matrix):
            for index2, j in enumerate(i):
                tmp_list[index1][index2] = j/s[index2]
        for index, i in enumerate(tmp_list):
            s[index] = sum(i)/len(i)
        return s

    def main(self, f1, f2, f3):
        pair_wise_matrix = self.pair_wise_matrix_gen(f1, f2, f3)

        weights = self.weight_cal(pair_wise_matrix)

        comparison, lambda_max, consistency_index, consistency_ratio = self.consistency_matrix(
            pair_wise_matrix, weights)

        is_consistent = self.isConsistent(consistency_ratio)

        # OUTPUT TO UI OR WHATEVER YOU WANT
